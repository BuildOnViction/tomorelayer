user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}


http {
    # Enumerate all the Tornado servers here
    upstream tomorelayer {
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
    }

    upstream netdata {
        # the Netdata server
        server 127.0.0.1:19999;
        keepalive 64;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    keepalive_timeout 65;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml
    application/x-javascript application/xml
    application/atom+xml text/javascript;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;

    server {
        listen      80;
        server_name *.tomochain.com *.devnet.tomochain.com;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name *.tomochain.com *.devnet.tomochain.com;
        gzip on;
        gzip_proxied any;
        gzip_types
            text/plain
            text/css
            text/js
            text/xml
            text/javascript
            application/javascript
            application/x-javascript
            application/json
            application/xml
            application/rss+xml
            image/svg+xml;

        ssl on;
        ssl_certificate /certs/relayer.tomochain.com.crt;
        ssl_certificate_key /certs/relayer.tomochain.com.key;

        location / {
            root /srv/www/tomorelayer/build/;
            index index.html;
            try_files $uri /index.html =404;

            if ($query_string) {
                expires max;
            }

            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /api {
            proxy_set_header Host $http_host;
            proxy_pass http://tomorelayer;
        }

        location /socket {
            proxy_pass http://tomorelayer;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /supervisord/ {
            proxy_pass http://127.0.0.1:9001/;
            proxy_http_version 1.1;
            proxy_buffering     off;
            proxy_max_temp_file_size 0;
            proxy_redirect     default;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header   Connection       "";
        }

        location = /netdata {
            return 301 /netdata/;
        }

        location ~ /netdata/(?<ndpath>.*) {
            auth_basic      "Administrator Login";
            auth_basic_user_file  /etc/nginx/.htpasswd;

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;
            proxy_set_header Connection "keep-alive";
            proxy_store off;
            proxy_pass http://netdata/$ndpath$is_args$args;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }

    }

}
